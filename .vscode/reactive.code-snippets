{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //  "scope": "javascript,typescript",
  //  "prefix": "log",
  //  "body": [
  //    "console.log('$1');",
  //    "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "reactive functional component": {
    "scope": "typescriptreact",
    "prefix": "reactiveFN",
    "body": [
      "import React, { FC } from 'react';",
      "",
      "import { I${1:pattern_name} } from './$2.interface';",
      "import { KlassInterpreter } from '../../services/KlassInterpreter';",
      "import merge from 'lodash/merge';",
      "",
      "interface Props {",
      "  passedBindings?: I${1:pattern_name};",
      "}",
      "",
      "export const ${1:pattern_name}: FC<Props> = props => {",
      "",
      "  const defaultBindings: I${1:pattern_name} = {",
      "    $3",
      "   }",
      "",
      "  const { passedBindings } = props;",
      "  const bindings: I${1:pattern_name} = merge(defaultBindings, passedBindings);",
      "  const klasses: KlassInterpreter = new KlassInterpreter(bindings);",
      "  const patternKlasses = [bindings.className, ...klasses.getKlasses()].join(' ')",
      "",
      "  // VIEW",
      "",
      "  return (",
      "    <div className={patternKlasses}>$4</div>",
      "  )",
      "}",
      "$0"
    ],
    "description": "Create a functional TypeScript React component."
  },

  "reactive class component": {
    "scope": "typescriptreact",
    "prefix": "reactiveClass",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "import { I${1:pattern_name} } from './$2.interface';",
      "import { KlassInterpreter } from '../../services/KlassInterpreter';",
      "import merge from 'lodash/merge';",
      "",
      "interface Props {",
      "  passedBindings?: I${1:pattern_name};",
      "}",
      "",
      "interface States {",
      "  $3",
      "}",
      "",
      "export class ${1:pattern_name} extends Component<Props, States> {",
      "",
      "  render() {",
      "",
      "    const defaultBindings: I${1:pattern_name} = {",
      "      $4",
      "    }",
      "",
      "    const bindings: I${1:pattern_name} = merge(defaultBindings, this.props.passedBindings);",
      "    const klasses: KlassInterpreter = new KlassInterpreter(bindings);",
      "    const patternKlasses = [bindings.className, ...klasses.getKlasses()].join(' ')",
      "",
      "    // VIEW",
      "",
      "    return (",
      "      <div className={patternKlasses}>$5</div>",
      "    )",
      "  }",
      "}",
      "$0"
    ],
    "description": "Create a class TypeScript React component."
  }
}

  // OPTIONAL DATA ATTRIBUTES

  // const optionalAttributes: any = {};
  // if (bindings.href) {
  //   optionalAttributes['href'] = bindings.href
  // }